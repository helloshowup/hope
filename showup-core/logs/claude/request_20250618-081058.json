{
  "model": "claude-opus-4-20250514",
  "max_tokens": 12000,
  "temperature": 0.2,
  "system": "\nYou're an expert educational content editor. \nYour task is to improve educational content while maintaining the author's voice, style, and key information.\nFocus on clarity, engagement, accuracy, and educational value.\n",
  "messages": [
    {
      "role": "user",
      "content": "this game is unwinable. analyise it and then create a lesson that will explains the interactions between contrants and requirements.what did they notice. how do they think they can solve it. for example. if i meet all the requiremnts but the budget is over. perhaps they need to downgrade their requirements. or if it is for nother company, perhaps they would ask for an increase in budget. Keep it to 300 words max.\n\n\n# Content to Enhance:\n\n\n\n### File: Module 6 Constraint Crunch.md ###\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<title>Constraint Crunch!</title>\n<style>\n  /* ===== EMBEDDABLE LAYOUT (fits any iframe) ===== */\n  body{margin:0;font-family:Arial,Helvetica,sans-serif;color:#333;line-height:1.5;}\n  #game{max-width:800px;margin:0 auto;padding:16px;box-sizing:border-box;}\n  h2{margin:4px 0 12px;color:hsl(359,97%,29%);} /* red heading */\n\n  /* ===== METER BAR ===== */\n  .meter{height:18px;background:#ddd;border:1px solid #555;position:relative;margin-bottom:6px;}\n  .meter span{display:block;height:100%;background:#4caf50;width:0;transition:.2s;width:0;}\n  .meter.over span{background:#f44336;}\n  .meter-label{font-size:0.85em;margin-bottom:2px;display:flex;justify-content:space-between;}\n\n  /* ===== REQUIREMENT CHIPS ===== */\n  .req{padding:4px 6px;border:1px solid #555;font-size:0.82em;margin-bottom:4px;border-radius:4px;}\n  .req.good{background:#4caf50;color:#fff;border:none;}\n  .req.bad{background:#f44336;color:#fff;border:none;}\n\n  /* ===== PART SELECT TABLE ===== */\n  table{width:100%;border-collapse:collapse;margin-top:12px;}\n  th,td{border:1px solid #aaa;padding:6px;text-align:center;font-size:0.9em;}\n  th{background:#f0f0f0;}\n  .part-row:hover{background:#fafafa;cursor:pointer;}\n  .sel{outline:2px solid hsl(359,97%,29%);} /* selected part */\n\n  /* ===== STATUS BOX ===== */\n  #status{margin-top:10px;font-weight:bold;}\n\n  /* ===== WIN/FAIL POPUP ===== */\n  #popup{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;border:2px solid #333;padding:20px;display:none;z-index:99;max-width:80%;}\n  #popup.good{border-color:#4caf50;} #popup.bad{border-color:#f44336;}\n</style>\n</head>\n<body>\n<div id=\"game\">\n  <h2>Robot Builder: Constraint Crunch!</h2>\n  <p><strong>Experiment time!</strong> Choose <strong>ONE</strong> option in each category (4 parts total).<br>\n  • First, challenge yourself to keep the <em>Budget, Width, Noise, and Build‑Time</em> meters inside their green bars—even if some requirement chips stay red.<br>\n  • Next, tweak your build until every requirement chip flips green and watch how the meters react.<br>\n  Where do the trade‑offs appear? Which parts pull you back inside the limits?</p>\n\n  <!-- Constraint meters -->\n  <div id=\"meters\"></div>\n\n  <!-- Requirement chips -->\n  <div id=\"reqs\"></div>\n\n  <!-- Parts selection tables generated by JS -->\n  <div id=\"catalog\"></div>\n\n  <div id=\"status\"></div>\n</div>\n\n<div id=\"popup\"></div>\n\n<script>\n// ====== DATA SETUP ======\nconst constraints=[\n  {key:'budget',label:'Budget $',max:500,unit:'$',fmt:v=>'$'+v},\n  {key:'width',label:'Max Width (cm)',max:60,unit:'cm',fmt:v=>v+'cm'},\n  {key:'noise',label:'Noise (dB)',max:50,unit:'dB',fmt:v=>v+'dB'},\n  {key:'time',label:'Build Time (weeks)',max:2,unit:'wk',fmt:v=>v+'wk'}\n];\nconst requirements=[\n  {key:'capacity',label:'Carry ≥ 20 trays',fn:stats=>stats.capacity>=20},\n  {key:'ui',label:'Must include Touchscreen UI',fn:stats=>stats.ui}\n];\n// 4 basic parts, each with 3 variants (light, mid, heavy)\nconst parts=[\n  {cat:'Chassis',key:'chassis',variants:[\n    {name:'Lite Frame',cost:80,width:40,noise:0,time:0,capacity:5},\n    {name:'Standard Frame',cost:120,width:50,noise:0,time:0,capacity:10},\n    {name:'Heavy Frame',cost:200,width:60,noise:0,time:0,capacity:20}\n  ]},\n  {cat:'Arm',key:'arm',variants:[\n    {name:'No Arm',cost:0,width:0,noise:0,time:0,capacity:0},\n    {name:'Light Arm',cost:100,width:5,noise:5,time:0.5,capacity:5},\n    {name:'Industrial Arm',cost:180,width:8,noise:10,time:1,capacity:10}\n  ]},\n  {cat:'Battery',key:'battery',variants:[\n    {name:'Small Battery',cost:60,width:5,noise:0,time:0.3,capacity:0},\n    {name:'Medium Battery',cost:120,width:7,noise:0,time:0.4,capacity:0},\n    {name:'Large Battery',cost:160,width:8,noise:0,time:0.5,capacity:0}\n  ]},\n  {cat:'UI Panel',key:'ui',variants:[\n    {name:'No UI',cost:0,width:0,noise:0,time:0,capacity:0,ui:false},\n    {name:'Button Pad',cost:40,width:4,noise:0,time:0.2,capacity:0,ui:false},\n    {name:'Touchscreen',cost:80,width:6,noise:0,time:0.3,capacity:0,ui:true}\n  ]}\n];\n\n// current selections (index of variant for each part)\nconst selection={chassis:0,arm:0,battery:0,ui:0};\n\n// ====== DOM BUILD ======\nconst meterBox=document.getElementById('meters');\nconst reqBox=document.getElementById('reqs');\nconst catBox=document.getElementById('catalog');\nconst status=document.getElementById('status');\nconst popup=document.getElementById('popup');\n\nfunction buildUI(){\n  // meters\n  meterBox.innerHTML='';\n  constraints.forEach(c=>{\n    meterBox.insertAdjacentHTML('beforeend',`<div class=\"meter-label\"><span>${c.label}</span><span id=\"val-${c.key}\"></span></div><div id=\"bar-${c.key}\" class=\"meter\"><span></span></div>`);\n  });\n  // requirements chips\n  reqBox.innerHTML='<h3>Requirements</h3>';\n  requirements.forEach((r,i)=>{\n    reqBox.insertAdjacentHTML('beforeend',`<div id=\"rq-${i}\" class=\"req\">${r.label}</div>`);\n  });\n  // parts tables\n  catBox.innerHTML='';\n  parts.forEach(part=>{\n    let html=`<h3>${part.cat}</h3><table><tr><th>Option</th><th>$</th><th>W(cm)</th><th>dB</th><th>Weeks</th><th>Carry</th></tr>`;\n    part.variants.forEach((v,i)=>{\n      html+=`<tr class=\"part-row\" data-cat=\"${part.key}\" data-idx=\"${i}\"><td>${v.name}</td><td>${v.cost}</td><td>${v.width}</td><td>${v.noise}</td><td>${v.time}</td><td>${v.capacity||''}</td></tr>`;\n    });\n    html+='</table>';\n    catBox.insertAdjacentHTML('beforeend',html);\n  });\n  // click handlers\n  document.querySelectorAll('.part-row').forEach(row=>{\n    row.addEventListener('click',()=>{\n      selection[row.dataset.cat]=+row.dataset.idx;\n      update();\n    });\n  });\n}\n\n// ====== GAME LOGIC ======\nfunction computeStats(){\n  const stats={cost:0,width:0,noise:0,time:0,capacity:0,ui:false};\n  parts.forEach(p=>{\n    const v=p.variants[selection[p.key]];\n    stats.cost += v.cost;\n    stats.width += v.width;\n    stats.noise += v.noise;\n    stats.time += v.time;\n    stats.capacity += v.capacity;\n    if(v.ui) stats.ui=true;\n  });\n  return stats;\n}\n\nfunction update(){\n  // highlight selected rows\n  document.querySelectorAll('.part-row').forEach(r=>r.classList.remove('sel'));\n  parts.forEach(p=>{\n    const idx=selection[p.key];\n    document.querySelector(`.part-row[data-cat=\"${p.key}\"][data-idx=\"${idx}\"]`).classList.add('sel');\n  });\n  const s=computeStats();\n  // update meters\n  constraints.forEach(c=>{\n    const val=c.key==='budget'?s.cost: c.key==='width'?s.width: c.key==='noise'?s.noise: s.time;\n    const pct=Math.min(100,val/c.max*100);\n    const bar=document.querySelector(`#bar-${c.key}`);\n    bar.querySelector('span').style.width=pct+'%';\n    bar.classList.toggle('over',val>c.max);\n    document.getElementById(`val-${c.key}`).textContent=c.fmt(val)+' / '+c.fmt(c.max);\n  });\n  // requirements\n  requirements.forEach((r,i)=>{\n    const good=r.fn(s);\n    const chip=document.getElementById(`rq-${i}`);\n    chip.className='req '+(good?'good':'bad');\n  });\n  // win/lose check\n  const anyOver=document.querySelectorAll('.meter.over').length>0;\n  const anyBad=document.querySelectorAll('.req.bad').length>0;\n  status.textContent= anyOver || anyBad? 'Constraints unmet – keep tweaking!' : '✔ All constraints satisfied!';\n  if(!anyOver && !anyBad){\n    endRound(true);\n  }\n}\n\nfunction endRound(success){\n  popup.className= success? 'good':'bad';\n  popup.textContent= success? '🎉 Perfect build! You stayed inside every constraint and met all requirements.' : '❌ Constraints violated!';\n  popup.style.display='block';\n  setTimeout(()=>popup.style.display='none',3000);\n}\n\nbuildUI();\nupdate();\n</script>\n</body>\n</html>\n\n"
    }
  ]
}